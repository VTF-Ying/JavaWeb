#文件介绍
![Image text](../文档/Images/1.png)
- src 存放源代码的
- web 存放项目相关资源的(html、css、jsp、图片等)
- WEB_INFO 存放相关配置的(web.xml等)



#打war包的流程
![Image text](../文档/Images/2.png)
1. 进入项目的web文件下 运行命令
2. jar -cvf war包名.war .
3. 最后一个点表示当前路径   最后在web包下会有一个.war的文件

#Tomcat 配置文件   
### Tomcat文件 conf 文件下有一个 server.xml 这是主配置文件 ###   
  * 端口配置
  > server.xml 里面有一个 Connector 标签 这个标签 里的 port 是指定端口号的
  > ![Image text](../文档/Images/3.png)
  * 配置虚拟路径
  > server.xml 里面有一个 Host 标签
  > ![Image text](../文档/Images/4.png)
  > 在此标签内添加一行配置就可以 让 war 包解压出来的 文件不必局限于非要存在 webapp 文件下 也能被访问到
  >![Image text](../文档/Images/5.png)
  * 配置虚拟主机
  > ![Image text](../文档/Images/6.png)

#HTTP请求
 * HTTP协议的请求
 > ![Image text](../文档/Images/7.png)
 * GET请求方式
 > ![Image text](../文档/Images/8.png)
 * POST请求方式
 > ![Image text](../文档/Images/9.png)
 * 部分响应头的解释
 > ![Image text](../文档/Images/10.png)

#动态资源案例
 * 发布静态资源步骤
 > ![Image text](../文档/Images/11.png)
 * 动态资源之Servlet介绍
 > ![Image text](../文档/Images/12.png)
 * Servlet的执行流程
 > ![Image text](../文档/Images/13.png)

#Servlet
 * Servlet三种实现方式
 > ![Image text](../文档/Images/16.png)
 * servlet_demo1的执行流程序
 > ![Image text](../文档/Images/14.png)
 * Servlet关系视图
 > ![Image text](../文档/Images/15.png)
