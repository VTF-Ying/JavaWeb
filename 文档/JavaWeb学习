#文件介绍
![Image text](../文档/Images/1.png)
- src 存放源代码的
- web 存放项目相关资源的(html、css、jsp、图片等)
- WEB_INFO 存放相关配置的(web.xml等)



#打war包的流程
![Image text](../文档/Images/2.png)
1. 进入项目的web文件下 运行命令
2. jar -cvf war包名.war .
3. 最后一个点表示当前路径   最后在web包下会有一个.war的文件

#Tomcat 配置文件   
### Tomcat文件 conf 文件下有一个 server.xml 这是主配置文件 ###   
  * 端口配置
  > server.xml 里面有一个 Connector 标签 这个标签 里的 port 是指定端口号的
  > ![Image text](../文档/Images/3.png)
  * 配置虚拟路径
  > server.xml 里面有一个 Host 标签
  > ![Image text](../文档/Images/4.png)
  > 在此标签内添加一行配置就可以 让 war 包解压出来的 文件不必局限于非要存在 webapp 文件下 也能被访问到
  >![Image text](../文档/Images/5.png)
  * 配置虚拟主机
  > ![Image text](../文档/Images/6.png)

#HTTP请求
 * HTTP协议的请求
 > ![Image text](../文档/Images/7.png)
 * GET请求方式
 > ![Image text](../文档/Images/8.png)
 * POST请求方式
 > ![Image text](../文档/Images/9.png)
 * 部分响应头的解释
 > ![Image text](../文档/Images/10.png)

#动态资源案例
 * 发布静态资源步骤
 > ![Image text](../文档/Images/11.png)
 * 动态资源之Servlet介绍
 > ![Image text](../文档/Images/12.png)
 * Servlet的执行流程
 > ![Image text](../文档/Images/13.png)

#Servlet
 * Servlet三种实现方式
 > ![Image text](../文档/Images/16.png)
 * servlet_demo1的执行流程序
 > ![Image text](../文档/Images/14.png)
 * Servlet 关系视图
 > ![Image text](../文档/Images/15.png)
 * Servlet 生命周期
 > ![Image text](../文档/Images/17.png)
 * Servlet 线程安全问题
 > ![Image text](../文档/Images/18.png)
 * Servlet 映射路径的三种配置方式
 > ![Image text](../文档/Images/19.png)
 * Servlet 创建时机
 > ![Image text](../文档/Images/20.png)

#ServletConfig
 * ServletConfig 介绍
 > ![Image text](../文档/Images/21.png)
 * ServletConfig 配置方式
 > ![Image text](../文档/Images/22.png)
 * ServletConfig 常用方法
 > ![Image text](../文档/Images/23.png)

#ServletContext
 * ServletContext
 > ![Image text](../文档/Images/24.png)
 * 域对象
 > ![Image text](../文档/Images/25.png)
 * ServletContext 配置方式
 > ![Image text](../文档/Images/26.png)
 * ServletContext 常用方法
 > ![Image text](../文档/Images/27.png)
 * 注解开发Servlet
 > ![Image text](../文档/Images/28.png)
 * @WebServlet 参数详解
 > ![Image text](../文档/Images/29.png)

#请求对象
  * 请求对象介绍
  > ![Image text](../文档/Images/30.png)
  * 请求对象常用方法
  > ![Image text](../文档/Images/31.png)
  > ![Image text](../文档/Images/32.png)
  > ![Image text](../文档/Images/33.png)
  * 获取请求参数并封装对象 的三种方式
  > 1. 手动封装     com.vtf.servlet.ServletDemo4
  > 2. 反射封装     com.vtf.servlet.ServletDemo5
  > 3. 工具类封装   com.vtf.servlet.ServletDemo6
  * 流对象获取请求信息
  > ![Image text](../文档/Images/34.png)
  * 请求域
  > ![Image text](../文档/Images/35.png)
  * 请求转发 和 请求包含
  > ![Image text](../文档/Images/36.png)
  > ![Image text](../文档/Images/37.png)
  > ![Image text](../文档/Images/38.png)
  > ![Image text](../文档/Images/39.png)
#响应对象
  * 响应对象介绍
  > ![Image text](../文档/Images/40.png)
  * 响应状态码
  > ![Image text](../文档/Images/41.png)
  * 字节流响应消息
  > ![Image text](../文档/Images/42.png)
  * 字符流响应消息
  > ![Image text](../文档/Images/43.png)
  * 响应图片
  > ![Image text](../文档/Images/44.png)
  * 设置缓存
  > ![Image text](../文档/Images/45.png)  
  > setDateHeader("Expires",System.currentTimeMillis() + 60*60*1000);
  > Expires 是控制缓存失效日期
  * 定时刷新
  > ![Image text](../文档/Images/46.png) 
  > setHeader("Refresh","3;URL=/response/login.html");
  * 请求重定向
  > ![Image text](../文档/Images/47.png) 
  * 文件下载
  > ![Image text](../文档/Images/48.png)
#Cookie
  * 会话介绍
  > ![Image text](../文档/Images/49.png)
  * Cookie介绍
  > ![Image text](../文档/Images/Cookie详解.png)
  * Cookie属性
  > ![Image text](../文档/Images/Cookie的属性.png)
  * Cookie添加获取
  > ![Image text](../文档/Images/Cookie添加获取.png)
  * Cookie的使用
  > ![Image text](../文档/Images/Cookie的使用.png)
  * Cookie细节
  > ![Image text](../文档/Images/Cookie细节.png)
#HttpSession
  * HttpSession介绍
  > ![Image text](../文档/Images/HttpSession介绍.png)
  * HttpSession常用方法
  > ![Image text](../文档/Images/HttpSession常用方法.png)
  * HttpSession获取
  > ![Image text](../文档/Images/HttpSession获取一.png)
  > ![Image text](../文档/Images/HttpSession获取二.png)
  > ![Image text](../文档/Images/HttpSession获取三.png)
  * HttpSession 的细节
  > ![Image text](../文档/Images/HttpSession的细节.png)
#JSP
  * JSP介绍
  > ![Image text](../文档/Images/JSP介绍.png)
  * JSP执行过程
  > ![Image text](../文档/Images/JSP执行过程.png)
  * JSP语法
  > ![Image text](../文档/Images/JSP语法.png)
  * JSP指令
  > ![Image text](../文档/Images/page指令.png)
  > ![Image text](../文档/Images/JSP指令.png)
  * JSP 隐式对象
  > ![Image text](../文档/Images/JSP隐式对象.png)
  * 四大域对象 复习
  > ![Image text](../文档/Images/四大域对象.png)
  >- 四个域的作用域范围大小:PageContext （page域） < request < session < servletContext（application域）
  * MVC模型
  > ![Image text](../文档/Images/MVC模型.png)
#EL表达式
  * EL表达式介绍
  > ![Image text](../文档/Images/EL表达式.png)
  * EL表达式范例
  > ![Image text](../文档/Images/EL表达式范例.png)
  * EL表达式注意事项
  > ![Image text](../文档/Images/EL表达式注意事项.png)
  * EL表达式运算符
  >- 关系运算符
  >> ![Image text](../文档/Images/EL表达式关系运算符.png)
  >- 逻辑运算符
  >> ![Image text](../文档/Images/EL表达式逻辑运算符.png)
  >- 其他运算符
  >> ![Image text](../文档/Images/EL表达式其他运算符.png)
  * EL表达式使用细节
  > ![Image text](../文档/Images/EL表达式的使用细节.png)
  * EL表达式隐式对象
  > ![Image text](../文档/Images/EL表达式隐式对象.png)
#JSTL 介绍
  * JSTL 介绍
  > ![Image text](../文档/Images/JSTL介绍.png)
  * JSTL 核心标签库
  > ![Image text](../文档/Images/JSTL核心标签库.png)







